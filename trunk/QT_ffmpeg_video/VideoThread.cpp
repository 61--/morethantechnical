/*
 * VideoThread.cpp
 *
 *  Created on: Oct 30, 2008
 *      Author: root
 */

#include "VideoThread.h"
#ifdef USE_FFMPEG
#include "/usr/include/ffmpeg/avformat.h"
#include "/usr/include/ffmpeg/avcodec.h"
#include "/usr/include/ffmpeg/swscale.h"
#else
#include "sdl_play_sound.h"
#include "/usr/include/SDL/SDL_audio.h"
#endif

VideoThread::VideoThread(VideoWidget* v):_v(v),running(true) {

}

VideoThread::~VideoThread() {

}

void VideoThread::stopPlaying() {
	running = false;
	StopSound();
}

void VideoThread::run() {
	playVideo();
}

void VideoThread::playVideo() {
#ifdef USE_FFMPEG
    AVFormatContext *pFormatCtx;
    int             i, videoStream;
    AVCodecContext  *pCodecCtx;
    AVCodec         *pCodec;
    AVFrame         *pFrame;
    AVFrame         *pFrameRGB;
    AVPacket        packet;
    int             frameFinished;
    int             numBytes;
    uint8_t         *buffer;

    // Register all formats and codecs
    av_register_all();

    // Open video file
    if(av_open_input_file(&pFormatCtx, "lala.avi", NULL, 0, NULL)!=0)
        return -1; // Couldn't open file

    // Retrieve stream information
    if(av_find_stream_info(pFormatCtx)<0)
        return -1; // Couldn't find stream information

    // Dump information about file onto standard error
    dump_format(pFormatCtx, 0, "lala.avi", false);

    // Find the first video stream
    videoStream=-1;
    for(i=0; i<pFormatCtx->nb_streams; i++)
        if(pFormatCtx->streams[i]->codec->codec_type==CODEC_TYPE_VIDEO)
        {
            videoStream=i;
            break;
        }
    if(videoStream==-1)
        return -1; // Didn't find a video stream

    // Get a pointer to the codec context for the video stream
    pCodecCtx=pFormatCtx->streams[videoStream]->codec;

    // Find the decoder for the video stream
    pCodec=avcodec_find_decoder(pCodecCtx->codec_id);
    if(pCodec==NULL)
        return -1; // Codec not found

    // Open codec
    if(avcodec_open(pCodecCtx, pCodec)<0)
        return -1; // Could not open codec

    // Hack to correct wrong frame rates that seem to be generated by some
    // codecs
//    if(pCodecCtx->frame_rate>1000 && pCodecCtx->frame_rate_base==1)
//        pCodecCtx->frame_rate_base=1000;

    // Allocate video frame
    pFrame=avcodec_alloc_frame();

    // Allocate an AVFrame structure
    pFrameRGB=avcodec_alloc_frame();
    if(pFrameRGB==NULL)
        return -1;

    int dst_fmt = PIX_FMT_RGB24;
    int dst_w = 160;
    int dst_h = 120;

    // Determine required buffer size and allocate buffer
    numBytes = avpicture_get_size(dst_fmt, dst_w, dst_h);
    buffer = new uint8_t[numBytes + 64];
    //put a PPM header on the buffer
    int headerlen = sprintf((char *) buffer, "P6\n%d %d\n255\n", dst_w, dst_h);

    _v->buf = (uchar*)buffer;
	_v->len = avpicture_get_size(dst_fmt,dst_w,dst_h) + headerlen;

    // Assign appropriate parts of buffer to image planes in pFrameRGB
    avpicture_fill(
    		(AVPicture *)pFrameRGB,
    		buffer + headerlen,
    		dst_fmt,
    		dst_w,
    		dst_h);

    SwsContext *img_convert_ctx;
    img_convert_ctx = sws_getContext(
    		pCodecCtx->width, pCodecCtx->height, pCodecCtx->pix_fmt,
    		dst_w, dst_h, dst_fmt,
    		SWS_BICUBIC, NULL, NULL, NULL);

    // Read frames and save first five frames to disk
    i=0;
    while(av_read_frame(pFormatCtx, &packet)>=0)
    {
        // Is this a packet from the video stream?
        if(packet.stream_index==videoStream)
        {
            // Decode video frame
            avcodec_decode_video(pCodecCtx, pFrame, &frameFinished,
                packet.data, packet.size);

            // Did we get a video frame?
            if(frameFinished)
            {
                // Convert the image from its native format to RGB
            	sws_scale(img_convert_ctx, pFrame->data, pFrame->linesize, 0,
						pCodecCtx->height, pFrameRGB->data, pFrameRGB->linesize);

            	emit updateWidget();

				this->msleep(200);
            }
        }

        // Free the packet that was allocated by av_read_frame
        av_free_packet(&packet);
    }

    // Free the RGB image
    delete [] buffer;
    av_free(pFrameRGB);

    // Free the YUV frame
    av_free(pFrame);

    // Close the codec
    avcodec_close(pCodecCtx);

    // Close the video file
    av_close_input_file(pFormatCtx);
#else
    PlaySound1(/*"girl.wav",_v*/);
#endif
//    return 0;
}
